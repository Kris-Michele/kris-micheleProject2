import {app} from './firebase.js';
import {getDatabase, ref, onValue, update, push, get, child} from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-database.js';

const database = getDatabase(app);
const dbref = ref(database);
      
const productContainer = document.querySelector(`.galleryFlex`);
const filterBox = document.querySelector(`.filterBox`);
const filteredTags = [];
const clearButton = document.getElementById('clearButton');
const cartContainer = document.getElementById('cartNumber');




// Adding event listeners to the tags on page load
filterBox.addEventListener('click', (e) => {
    const tag = e.target;
    if(tag.nodeName === 'LI' && tag.classList.contains('tag')){
        if(filteredTags.includes(tag.innerText)){
            
            // removes if being filtered for already
            let tagChecked = filteredTags.indexOf(tag.innerText);
            delete filteredTags[tagChecked];
            filterProductRendering(filteredTags);
            tag.classList.toggle("tagActive");
            
        } else {
            filteredTags.push(tag.innerText);
            filterProductRendering(filteredTags);
            tag.classList.toggle("tagActive");
        };
    };
});

//Adding the event listener to the clear button on page load
clearButton.addEventListener('click', () => {
    filteredTags.length = 0;
    filterProductRendering(filteredTags);
    const allTags = document.querySelectorAll(".tag");
    allTags.forEach((tag)=>{
        if(tag.classList.contains("tagActive")){
            tag.classList.toggle("tagActive");
        };
    });
});

//  Michele
// Function : userKeyGen();
// purpose: checks local storage for a user key. if not found one is generated by pushing to the database. each user has their own key, and has their own cart.
const userKeyGen = () => {
    let localKey = localStorage.getItem("key");
  
    if (!localKey) {
      const newUserKeyRef = push(dbref, { cart: 0 });
      localKey = newUserKeyRef.key;
      localStorage.setItem("key", localKey);
    }
  
    return localKey;
  };
const localKey = userKeyGen();

// Michele
// Function: cartMemoryRender();
// (param) key : key represents the users generated key from userKeyGen(); 
// purpose: renders the cart counter to the page by referencing the users node in the database and prevents the cart from resetting after leaving the page.
const cartMemoryRender =  (key) => {
 get(child(dbref,key))
    .then((snapshot)=>{
        if(snapshot.exists){
           let cartQty = snapshot.val();
           console.log(cartQty.cart)
           if(cartQty.cart === 0 ){
           document.getElementById(`cartNumber`).style.display = "none";
           };
           cartContainer.textContent = cartQty.cart;
        }else{
            console.log("failed");
        }
    });
};

// Michele
// Function : intialRender();
// Triggers:
//      displayProducts(allProducts,productContainer)
//      cartMemoryRender(localKey);
//      addToCartEvents();
// purpose: references the database to retrieve and store product information, then renders the page by triggering other functions.

const intialRender = () =>{
    onValue(dbref,(data)=>{
        const allProducts = [];
        if(data.exists()){
            const payload = data.val().products;
            for(let product in payload){
                allProducts.push(payload[product]);
            };
        };
    displayProducts(allProducts,productContainer);
    cartMemoryRender(localKey);
    addToCartEvents();
    });
};
// Michele
// Function : dispalyProducts();
// (param) productsArr - an array of objects containing product information.
// (param) node - targeted node to render products from productsArr to.
// purpose: takes in the two params and will build the html using information from the params.
const displayProducts = (productsArr,node) =>{ 
    node.innerHTML = "";
    productsArr.forEach((product)=>{
        //creating the required elements for the listing.
        const productArticle = document.createElement(`article`);
        const imgContainer = document.createElement(`div`);
        const productInfoContainer = document.createElement(`div`);
        const img = document.createElement(`img`);
        const productTitle = document.createElement(`h3`);
        const description = document.createElement(`p`);
        const price = document.createElement(`p`);
        const span = document.createElement(`span`);
        const addToCartBtn = document.createElement(`button`);

        // assigning img src and alt from the firebase realtime database.
        img.src = product.img;
        img.alt = product.alt;

        // assigning text values of each product
        productTitle.innerText = product.product;
        description.innerText = product.description;
        price.innerText = product.price;
        span.innerText = product.formerPrice;

        // creating the structure in the dom.
        productArticle.appendChild(imgContainer);
        imgContainer.appendChild(img);
        productArticle.appendChild(productInfoContainer);
        productInfoContainer.appendChild(productTitle);
        productInfoContainer.appendChild(description);
        productInfoContainer.appendChild(price);
        price.append(span);
        productInfoContainer.appendChild(addToCartBtn);
        addToCartBtn.innerText = "Add To Cart"

        //appending to page
        node.appendChild(productArticle);

        // assiging classes to required elements
        productArticle.classList.add(`productArticle`);
        imgContainer.classList.add(`vegetableImage`);
        productInfoContainer.classList.add(`vegetableText`);
        price.classList.add(`price`);
        span.classList.add(`formerPrice`);
        addToCartBtn.classList.add(`addToCart`);
    });
};

// Michele
// Function : filterProductRendering();
// (param) filtersArr - an array of tags.
// Triggers:
        //displayProducts(filteredProducts,productContainer)
// purpose: takes in the filterArr param and will build the html using information from the param by referencing the database and filtering out products that dont meet the tag criteria.
const filterProductRendering = (filtersArr) =>{
    onValue(dbref,(data)=>{
        const allProducts = [];
        if(data.exists()){
            const payload = data.val().products
            for(let product in payload){
                allProducts.push(payload[product]);
            }
        };
        const filteredProducts = allProducts.filter((product)=>{
            const productTags = Object.values(product.tagObj);
            return  filtersArr.every((tag)=> productTags.includes(tag));
        });
        if(filteredProducts.length === 0){
            console.log(`no matches`);
        }else{
            displayProducts(filteredProducts,productContainer)
        };
  });
};


// Michele
// Function: addToCartEvents();
// purpose: adds an event listener to all add to cart buttons and provides them with logic to interface the database and update the user's cart by referencing their local key.
const addToCartEvents = () => {
    const cartButtonsArray = document.querySelectorAll('.addToCart');
    cartButtonsArray.forEach((button) => {
        button.addEventListener('click', (e) => {
            document.getElementById(`cartNumber`).style.display = "";  
          const cartItemCount = Number(cartContainer.textContent) + 1;
          const userCartFirebasePath = localKey + '/cart';
          const updatedCart = {};
          updatedCart[userCartFirebasePath] = cartItemCount;
          update(dbref, updatedCart);
          cartContainer.textContent = cartItemCount;
        });
      });
    };


export {intialRender};